#!/usr/bin/env bash
# Assembled by dawidd6

# print functions
#####################################################################################
print_help()
{
	echo -e "Options:"
	echo -e "\thelp \t\t print this help message"
	echo -e "\tall \t\t print all informations listed below"
	echo -e "\tos \t\t operating system name and arch"
	echo -e "\tcpu \t\t CPU information"
	echo -e "\tgpu \t\t GPU information"
	echo -e "\tkernel \t\t kernel version"
	echo -e "\tuptime \t\t machine uptime"
	echo -e "\tshell \t\t default shell"
	echo -e "\tbattery \t current battery status"
	echo -e "\tram \t\t current ram usage"
	echo -e "\tdisk \t\t main disk usage"
	echo -e "\tpkgs \t\t count installed packages"
	echo -e "\tsong \t\t current playing song (mpc)"
	echo -e "\tvol \t\t master volume and state"
}

print_error()
{
	echo -e "minifetch: wrong argument"
	echo -e "Write „minifetch help” for informations"
	return 1
}
#####################################################################################

# get functions
#####################################################################################
get_cpu()
{
	cpu="$(grep "^model name" /proc/cpuinfo |cut -d":" -f2 |tail -n 1| tail -c +2)"
	echo "$cpu"
}

get_gpu()
{
	gpu="$(lspci |grep "VGA compatible controller" |cut -d":" -f3 |tail -c +2)"
	echo "$gpu"
}

get_os()
{
	os="$(grep "^PRETTY_NAME" /etc/os-release |cut -d"=" -f2| cut -d'"' -f2) $(uname -m)"
	echo "$os"
}

get_kernel()
{
	kernel="$(uname -r)"
	echo "$kernel"
}

get_uptime()
{
	uptime="$(uptime -p)"
	echo "$uptime"
}

get_shell()
{
	shell="$(echo $SHELL)"
	echo "$shell"
}

get_battery()
{
	if [ -d /sys/class/power_supply/BAT1/ ]; then	
		battery="$(cat /sys/class/power_supply/BAT1/capacity)% $(cat /sys/class/power_supply/BAT1/status)"
	elif [ -d /sys/class/power_supply/BAT0/ ]; then
		battery="$(cat /sys/class/power_supply/BAT0/capacity)% $(cat /sys/class/power_supply/BAT0/status)"
	fi
	echo "$battery"
}

get_ram()
{
	ram_total="$(cat /proc/meminfo |awk '/^MemTotal:/ {print $2;}')"
	ram_used=$[$ram_total-$(cat /proc/meminfo |awk '/^Cached:/ {print $2;}')-$(cat /proc/meminfo |awk '/^MemFree:/ {print $2;}')]
	ram_used=$[$ram_used/1024]
	ram_total=$[$ram_total/1024]
	ram_percentage=$[100*$ram_used/$ram_total]
	echo ""$ram_used"MB / "$ram_total"MB ("$ram_percentage"%)"
}

get_disk()
{
	if df -h |grep -wq "/dev/mapper/fedora-root"; then
		disk_total="$(df -h |grep "/dev/mapper/fedora-root" |awk '/dev/ {print $2;}')"
        	disk_used="$(df -h |grep "/dev/mapper/fedora-root" |awk '/dev/ {print $3;}')"
		disk_percentage="$(df -h |grep "/dev/mapper/fedora-root" |awk '/dev/ {print $5;}')"
	elif df -h |grep -wq "/dev/mapper/centos-root"; then
                disk_total="$(df -h |grep "/dev/mapper/centos-root" |awk '/dev/ {print $2;}')"
                disk_used="$(df -h |grep "/dev/mapper/centos-root" |awk '/dev/ {print $3;}')"
                disk_percentage="$(df -h |grep "/dev/mapper/centos-root" |awk '/dev/ {print $5;}')"
	else
		disk_total="$(df -h |grep "/dev/sda" |awk '/dev/ {print $2;}')"
		disk_used="$(df -h |grep "/dev/sda" |awk '/dev/ {print $3;}')"
		disk_percentage="$(df -h |grep "/dev/sda" |awk '/dev/ {print $5;}')"
	fi
	echo ""$disk_used" / "$disk_total" ("$disk_percentage")"
}

get_pkgs()
{
	if [ -d /etc/dpkg ]; then
		pkgs=$[$(dpkg -l |wc -l)-6]
	elif [ -e /etc/pacman.conf ]; then
		pkgs="$(pacman -Qq |wc -l)"
	elif [ -d /etc/apk ]; then
		pkgs="$(apk info |wc -l)"
	elif [ -d /etc/dnf ]; then
		pkgs=$[$(dnf list installed |wc -l)-2]
	elif [ -d /etc/yum ]; then
		pkgs=$[$(yum list installed -q| wc -l)-1]
	fi
	echo "$pkgs"
}

get_song()
{
	if mpc version > /dev/null 2>&1; then
		song="$(mpc current)"
	else
		song="Unknown"
	fi
	echo "$song"
}

get_vol()
{
	if amixer > /dev/null 2>&1; then
		if pulseaudio --check > /dev/null 2>&1; then
			volume="$(amixer -D pulse get Master |awk '/Front Left:/ {print $5;}' |cut -d"[" -f2 |cut -d"]" -f1)"
			state="$(amixer -D pulse get Master |awk '/Front Left:/ {print $6;}' |cut -d"[" -f2 |cut -d"]" -f1)"
		else
			volume="$(amixer get Master |awk '/Front Left:/ {print $5;}' |cut -d"[" -f2 |cut -d"]" -f1)"
                	state="$(amixer get Master |awk '/Front Left:/ {print $7;}' |cut -d"[" -f2 |cut -d"]" -f1)"
		fi
	else
		volume="Unknown"
	fi
	echo ""$volume" "$state""
}

get_all()
{
	
	color_green_start="\e[1;32m"
	color_green_end="\e[0m"
	echo -e ""$color_green_start"CPU:"$color_green_end" \t\t$(get_cpu)"
	echo -e ""$color_green_start"GPU:"$color_green_end" \t\t$(get_gpu)"
	echo -e ""$color_green_start"OS:"$color_green_end" \t\t$(get_os)"
	echo -e ""$color_green_start"Kernel:"$color_green_end" \t$(get_kernel)"
	echo -e ""$color_green_start"Uptime:"$color_green_end" \t$(get_uptime)"
	echo -e ""$color_green_start"Shell:"$color_green_end" \t\t$(get_shell)"
	echo -e ""$color_green_start"Battery:"$color_green_end" \t$(get_battery)"
	echo -e ""$color_green_start"Ram:"$color_green_end" \t\t$(get_ram)"
	echo -e ""$color_green_start"Disk:"$color_green_end" \t\t$(get_disk)"
	echo -e ""$color_green_start"Packages:"$color_green_end" \t$(get_pkgs)"
	echo -e ""$color_green_start"Song:"$color_green_end" \t\t$(get_song)"
	echo -e ""$color_green_start"Volume:"$color_green_end" \t$(get_vol)"
}
#####################################################################################

# main
#####################################################################################
if [ "$#" == "0" ]; then
	print_help
else
	for i in "$@"
	do
		case "$i" in
  		"help") print_help ;;
  		"cpu") get_cpu ;;
  		"gpu") get_gpu ;;
  		"os") get_os ;;
  		"kernel") get_kernel ;;
		"uptime") get_uptime ;;
		"shell") get_shell ;;
		"battery") get_battery ;;
		"ram") get_ram ;;
		"disk") get_disk ;;
		"pkgs") get_pkgs ;;
		"song") get_song ;;
		"vol") get_vol ;;
  		"all") get_all ;;
		*) print_error ;;
		esac
	done
fi
#####################################################################################
